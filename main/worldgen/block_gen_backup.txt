extends Node
class_name BlockGen

@export var block_export: Node
@export var heightmap: FastNoiseLite

func _ready():
	var default_block_verticies: PackedVector3Array = PackedVector3Array([
		Vector3(0, 0, 0),
		Vector3(1, 0, 0),
		Vector3(1, 0, 1),
		Vector3(0, 0, 1),
		Vector3(0, 1, 0),
		Vector3(1, 1, 0),
		Vector3(1, 1, 1),
		Vector3(0, 1, 1),
	])
	var default_block_faces: Array[Array] = [
		# Bottom Face
		[0, 1, 2, 3],
		# Top Face
		[4, 5, 6, 7],
		# Front Face
		[3, 2, 6, 7],
		# Back Face
		[0, 1, 5, 4],
		# Left Face
		[0, 3, 7, 4],
		# Right Face
		[1, 2, 6, 5],
	]
	var default_block_indicies: Array[Array] = [
		# Bottom Face
		[0, 2, 1,
		0, 3, 2],
		# Top Face
		[0, 1, 2,
		0, 2, 3],
		# Front Face
		[0, 2, 1,
		0, 3, 2],
		# Back Face
		[0, 1, 2,
		0, 2, 3],
		# Left Face
		[0, 2, 1,
		0, 3, 2],
		# Right Face
		[0, 1, 2,
		0, 2, 3]
	]
	var face_directions: Array[Vector3] = [
		Vector3(0, -1, 0), # Bottom Face Direction
		Vector3(0, 1, 0), # Top Face Direction
		Vector3(0, 0, 1), # Front Face Direction
		Vector3(0, 0, -1), # Back Face Direction
		Vector3(-1, 0, 0), # Left Face Direction
		Vector3(1, 0, 0), # Right Face Direction
	]
	
	var terrain_width: int = 100
	var terrain_depth: int = 100
	var max_height: int = 15
	var block_map = []
	
	for x in range(terrain_width):
		var yz_slice = []
		for y in range(max_height):
			var z_slice = []
			for z in range(terrain_depth):
				var height_val = heightmap.get_noise_2d(x, z)
				var height = pow(int(height_val * max_height), 1.2)
				if y <= height or y==0:
					z_slice.append(1)
				else:
					z_slice.append(0)
			yz_slice.append(z_slice)
		block_map.append(yz_slice)
	
	var verticies: PackedVector3Array = PackedVector3Array()
	var indicies: PackedInt32Array = PackedInt32Array()
	
	var c: int = 0
	var x_len = block_map.size()
	for x in x_len:
		var y_len = block_map[x].size()
		for y in y_len:
			var z_len = block_map[x][y].size()
			for z in z_len:
				if block_map[x][y][z] == 0: continue
				for i_dir in range(6):
					var dir = face_directions[i_dir]
					var has_neighbor_block: bool
					if (x_len>x+dir.x and y_len>y+dir.y and z_len>z+dir.z) and (x+dir.x>=0 and y+dir.y>=0 and z+dir.z>=0):
						has_neighbor_block = block_map[x+dir.x][y+dir.y][z+dir.z] == 1
					if has_neighbor_block: continue
					var face_verticies_indicies = default_block_faces[i_dir]
					var face_indicies = default_block_indicies[i_dir]
					for face_vertex in face_verticies_indicies:
						verticies.append(default_block_verticies[face_vertex] + Vector3(x,y,z))
					for face_index in face_indicies:
						indicies.append(face_index+c)
					c+=4
	
	var array: Array = []
	array.resize(Mesh.ARRAY_MAX)
	array[Mesh.ARRAY_VERTEX] = verticies
	array[Mesh.ARRAY_INDEX] = indicies
	var array_mesh = ArrayMesh.new()
	array_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, array)
	var mesh = MeshInstance3D.new()
	mesh.mesh = array_mesh
	add_child(mesh)
